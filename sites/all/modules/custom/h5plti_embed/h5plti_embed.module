<?php

/**
 * H5PLTI Embed.
 */

/**
 * Implements hook_menu().
 */
function h5plti_embed_menu() {
  $items = array();

  $items['h5p-video/%/lti'] = array(
    'title' => 'LTI H5P video',
    'description' => 'H5P video embed into lti',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'h5plti_embed_page_callback',
    'page arguments' => array(1),
    'access callback' => 'h5plti_embed_perm',
    'access arguments' => array(),
  );

  return $items;
}

/**
 * The callback for for h5p-video/%/lti page.
 */
function h5plti_embed_page_callback($nid) {
  // Check the nid.
  $node = node_load($nid);
  if ($node === FALSE) {
    drupal_not_found();
    drupal_exit();
  }
  else if ($node->type != 'h5p_content') {
    drupal_not_found();
    drupal_exit();
  }

  // Check the authorization.
  $account = h5plti_embed_authorization();
  if (is_string($account)) {
    // Return the simple empty page with errors.
    return '';
  }

  // Prepare the page for lti.
  print_r($_REQUEST);
  print $nid;
  drupal_exit();
}

/**
 * Access callback for h5p-video/%/lti page.
 */
function h5plti_embed_perm() {
  // Always allows to get h5p-video/%/lti page.
  return TRUE;
}

function h5plti_embed_authorization() {
  global $user;
  module_load_include('inc', 'lti_tool_provider', 'lti_tool_provider.operations');

  // If not an LTI launch request, then ignore.
  if (!lti_tool_provider_is_basic_lti_request()) {
    drupal_set_message(t('Not a LTI request.'), 'info');
    return t('Error: Not a LTI request.');
  }
  // Insure we have a valid context.
  if (empty($_REQUEST['oauth_consumer_key'])) {
    unset($_SESSION['lti_tool_provider_context_info']);
    drupal_set_message(t('Not a valid LTI context.'), 'info');
    return t('Error: Invalid context. Missing oauth_consumer_key in request.');
  }
  // Begin a new session based on this LTI launch request.
  drupal_session_start();
  $oauth_consumer_key = $_REQUEST["oauth_consumer_key"];
  // Verify the message signature.
  $store = new LTIToolProviderOAuthDataStore();
  $server = new OAuthServer($store);
  $method = new OAuthSignatureMethod_HMAC_SHA1();
  $server->add_signature_method($method);
  $request = OAuthRequest::from_request();
  try {
    $server->verify_request($request);
    // This is a LTI launch request.
  } catch (Exception $e) {
    drupal_set_message(check_plain($e->getMessage()), 'error');
    return t('Error: Invalid context, OAuth failure.');
  }
  // Collect the launch information for later storage in the session.
  $launch_info = $request->get_parameters();
  if (empty($launch_info['context_id'])) {
    if (isset($launch_info['launch_presentation_return_url'])) {
      lti_tool_provider_goto(url($launch_info['launch_presentation_return_url'], array('query' => array('lti_errormsg' => t('Error: Invalid context, No context Id.')))));
    }
    else {
      return t('Error: Invalid context, No context Id.');
    }
  }
  $consumer = lti_tool_provider_get_consumer_by_key($oauth_consumer_key);
  $launch_info['consumer_id'] = $consumer->lti_tool_provider_consumer_id;
  $launch_info['consumer_domain'] = $consumer->lti_tool_provider_consumer_domain;
  if (!empty($launch_info['user_id'])) {
    $lti_user = $launch_info['user_id'] . $launch_info['consumer_domain'];
  }
  else {
    $lti_user = 'lti_user' . $launch_info['consumer_domain'];
  }
  // Revalidate incoming user.
  if ($user->uid > 0 && $user->name != $lti_user) {
    // Log out prior user and clear session, retaining lti session variables.
    watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
    module_invoke_all('user_logout', $user);
    // Destroy the current session, and reset $user to the anonymous user.
    session_destroy();
    drupal_session_start();
    drupal_set_message(t('Logged current user out.'), 'info');
  }
  if ($user->uid == 0) {
    // If no mail address given, Form a dummy mail address.
    if (empty($launch_info['lis_person_contact_email_primary'])) {
      if ($launch_info['consumer_domain'] == '') {
        $launch_info['lis_person_contact_email_primary'] = $lti_user . '@invalid';
      }
      else {
        $launch_info['lis_person_contact_email_primary'] = $lti_user . '.invalid';
      }
    }
    // Unauthenticated so create user if necessary.
    if (($account = user_load_by_name($lti_user)) || ($account = user_load_by_mail($launch_info['lis_person_contact_email_primary']))) {
      // User exists by name or mail.
      if ($account->uid == 1) {
        // User 1 must use drupal authentication.
        if (isset($launch_info['launch_presentation_return_url'])) {
          lti_tool_provider_goto(url($launch_info['launch_presentation_return_url'], array('query' => array('lti_errormsg' => t('Admin account must use Drupal authentication.')))));
        }
        else {
          drupal_set_message(t('Admin account must use Drupal authentication.'), 'error');
          return t('Admin account must use Drupal authentication.');
        }
      }
    }
    else {
      if (!$account = lti_tool_provider_create_account($lti_user, $launch_info)) {
        if (isset($launch_info['launch_presentation_return_url'])) {
          lti_tool_provider_goto(url($launch_info['launch_presentation_return_url'], array('query' => array('lti_errormsg' => t('Account creation failed.')))));
        }
        else {
          drupal_set_message(t('Account creation failed.'), 'error');
          return t('Account creation failed.');
        }
      }
    }
    // Log the user in.
    $form_state = array('uid' => $account->uid);
    user_login_submit(array(), $form_state);
  }
  else {
    $account = user_load($user->uid);
  }

  // If no errors - logout user anyway.
  if (!is_string($account)) {
    module_load_include('pages.inc', 'user');
    user_logout();
  }

  return $account;
}

/**
 * Implements hook_page_build().
 */
function h5plti_embed_init() {
  // Block all the rest LTI requests.
  $allows = array('lti', 'h5p-video/%/lti');

  module_load_include('inc', 'lti_tool_provider', 'lti_tool_provider.operations');
  if (TRUE || lti_tool_provider_is_basic_lti_request()) {
    $path = current_path();
    $path = explode('/', $path);
    $ancestors = menu_get_ancestors($path);

    $interselect = array_intersect($allows, $ancestors);
    if (empty($interselect)) {
      drupal_not_found();
      drupal_exit();
    }
  }
}
