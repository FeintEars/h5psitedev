<?php

/**
 * H5PLTI Embed.
 */

/**
 * Implements hook_menu().
 */
function h5plti_embed_menu() {
  $items = array();

  $items['h5p-video/%/lti'] = array(
    'title' => 'LTI H5P video',
    'description' => 'H5P video embed into lti',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'h5plti_embed_page_callback',
    'page arguments' => array(1),
    'access callback' => 'h5plti_embed_perm',
    'access arguments' => array(),
  );

  return $items;
}

/**
 * The callback for for h5p-video/%/lti page.
 */
function h5plti_embed_page_callback($nid) {
  // Check the nid.
  $node = node_load($nid);
  if ($node === FALSE) {
    drupal_not_found();
    drupal_exit();
  }
  else if ($node->type != 'h5p_content') {
    drupal_not_found();
    drupal_exit();
  }

  // Check the authorization.
  $consumer = h5plti_embed_authorization();
  if (is_string($consumer)) {
    // Return the simple empty page with errors.
    print $consumer;
    drupal_exit();
  }

  // Prepare the page for lti.
  print_r($consumer);
  print_r($_REQUEST);
  print $nid;
  drupal_exit();
}

/**
 * Access callback for h5p-video/%/lti page.
 */
function h5plti_embed_perm() {
  // Always allows to get h5p-video/%/lti page.
  return TRUE;
}

/**
 * Just check the lti connection.
 */
function h5plti_embed_authorization() {
  module_load_include('inc', 'lti_tool_provider', 'lti_tool_provider.operations');

  global $user;
  // If not an LTI launch request, then ignore.
  if (!lti_tool_provider_is_basic_lti_request()) {
    drupal_set_message(t('Not a LTI request.'), 'info');
    return t('Error: Not a LTI request.');
  }
  // Insure we have a valid context.
  if (empty($_REQUEST['oauth_consumer_key'])) {
    unset($_SESSION['lti_tool_provider_context_info']);
    drupal_set_message(t('Not a valid LTI context.'), 'info');
    return t('Error: Invalid context. Missing oauth_consumer_key in request.');
  }
  // Begin a new session based on this LTI launch request.
  drupal_session_start();
  $oauth_consumer_key = $_REQUEST["oauth_consumer_key"];
  // Verify the message signature.
  $store = new LTIToolProviderOAuthDataStore();
  $server = new OAuthServer($store);
  $method = new OAuthSignatureMethod_HMAC_SHA1();
  $server->add_signature_method($method);
  $request = OAuthRequest::from_request();
  try {
    $server->verify_request($request);
    // This is a LTI launch request.
  } catch (Exception $e) {
    drupal_set_message(check_plain($e->getMessage()), 'error');
    return t('Error: Invalid context, OAuth failure.');
  }
  $consumer = lti_tool_provider_get_consumer_by_key($oauth_consumer_key);
  return $consumer;
}
