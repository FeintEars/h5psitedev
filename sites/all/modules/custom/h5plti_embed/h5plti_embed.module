<?php

/**
 * H5PLTI Embed.
 */

module_load_include('inc', 'h5plti_embed', 'h5plti_embed.credentials');

/**
 * Implements hook_menu().
 */
function h5plti_embed_menu() {
  $items = array();

  $items['h5p-video/%/lti'] = array(
    'title' => 'LTI H5P video',
    'description' => 'H5P video embed into lti',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'h5plti_embed_page_callback',
    'page arguments' => array(1),
    'access callback' => 'h5plti_embed_perm',
    'access arguments' => array(),
  );

  return $items;
}

/**
 * The callback for for h5p-video/%/lti page.
 */
function h5plti_embed_page_callback($nid) {
  // Check the nid.
  $node = node_load($nid);

  if ($node === FALSE) {
    watchdog('h5plti_embed', 'The video is not found.');
    print t('The video is not found.');
    drupal_exit();
  }
  else if ($node->type != 'h5p_content') {
    watchdog('h5plti_embed', 'The video is not found.');
    print t('The video is not found.');
    drupal_exit();
  }

  // Check the authorization.
  $consumer = h5plti_embed_authorization();
  if (is_string($consumer)) {
    // Return the simple empty page with errors.
    watchdog('h5plti_embed', $consumer);
    print $consumer;
    drupal_exit();
  }

  // Check if the key is allowed for node.
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $allowed_keys = $node_wrapper->field_lti_allowed_keys->value();
  if (!in_array($consumer->lti_tool_provider_consumer_key, $allowed_keys)) {
    h5plti_embed_watchdog_decline($nid, $consumer->lti_tool_provider_consumer_key, $consumer->lti_tool_provider_consumer_secret);
    print t('Check the key and secret.');
    drupal_exit();
  }

  // Prepare the page for lti.
  h5plti_embed_watchdog_accept($nid, $consumer->lti_tool_provider_consumer_key, $consumer->lti_tool_provider_consumer_secret);
  h5p_embed($nid);
  drupal_exit();
}

/**
 * Watchdog: accepted view.
 */
function h5plti_embed_watchdog_accept($nid, $key, $secret) {
  watchdog('h5plti embed', t('Accepted embed lti: nid=!nid, key=!key, secret=!secret', array(
    '!nid' => $nid,
    '!key' => $key,
    '!secret' => $secret,
  )));
}

/**
 * Watchdog: declined view (error).
 */
function h5plti_embed_watchdog_decline($nid, $key, $secret) {
  watchdog('h5plti embed', t('Declined embed lti: nid=!nid, key=!key, secret=!secret', array(
    '!nid' => $nid,
    '!key' => $key,
    '!secret' => $secret,
  )));
}

/**
 * Access callback for h5p-video/%/lti page.
 */
function h5plti_embed_perm() {
  // Always allows to get h5p-video/%/lti page.
  return TRUE;
}

/**
 * Implements hook_init().
 */
function h5plti_embed_init() {
  // Block al the rest lti requests.
  $allows = array('h5p-video/%/lti');

  module_load_include('inc', 'lti_tool_provider', 'lti_tool_provider.operations');
  if (lti_tool_provider_is_basic_lti_request()) {
    $path = current_path();
    $path = explode('/', $path);
    $ancestors = menu_get_ancestors($path);
    $intersect = array_intersect($allows, $ancestors);
    if (empty($intersect)) {
      print t('The video is not found.');
      drupal_exit();
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function h5plti_embed_node_delete($node) {
  if ($node->type == 'h5p_content') {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $allowed_keys = $node_wrapper->field_lti_allowed_keys->value();
    // Delete all H5PLTI-embed keys.
    foreach ($allowed_keys as $key) {
      $consumer = lti_tool_provider_get_consumer_by_key($key);
      if ($consumer->lti_tool_provider_consumer_consumer == 'H5PLTI Embed') {
        lti_tool_provider_consumer_delete($consumer);
      }
    }
  }
}
